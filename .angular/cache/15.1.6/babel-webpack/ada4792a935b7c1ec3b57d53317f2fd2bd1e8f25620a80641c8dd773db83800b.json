{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar access_token = localStorage.getItem('access_token');\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${access_token}`\n  })\n};\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.url = `${environment.apiUrl}`;\n    const session = localStorage.getItem('access_token');\n    this.currentSessionSubject = new BehaviorSubject(session);\n    this.currentSession = this.currentSessionSubject.asObservable();\n  }\n  get currentSessionValue() {\n    return this.currentSessionSubject.value;\n  }\n  login(username, password) {\n    return this.http.post(`${this.url}/login-system`, {\n      username,\n      password\n    }).pipe(tap(data => {\n      localStorage.setItem('access_token', data['access_token']);\n      this.currentSessionSubject.next(data);\n    }));\n  }\n  loginUN(uname, pwd) {\n    let request = this.http.post(`${environment.apiUrl}/login-system`, {\n      username: uname,\n      password: pwd\n    });\n    return new Promise((resolve, reject) => {\n      request.subscribe(response => {\n        if (response) {\n          localStorage.setItem('access_token', response['access_token']);\n          localStorage.setItem('permissions', response['permissions']);\n          localStorage.setItem('exp', Date.now().toString());\n          this.currentSessionSubject.next(response);\n          resolve({\n            acceso: true\n          });\n        } else {\n          resolve({\n            acceso: false\n          });\n        }\n      }, error => {\n        resolve(error);\n      });\n    });\n  }\n  logout() {\n    let request = this.http.delete(`${this.url}/logout-system`, httpOptions);\n    return request.pipe(map(data => {\n      if (data) {\n        // remove user from local storage to log user out\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('permissions');\n        this.currentSessionSubject.next(null);\n        localStorage.clear();\n      }\n      return data;\n    }));\n  }\n  deleteSession() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('access_token');\n    this.currentSessionSubject.next(null);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","BehaviorSubject","map","tap","environment","access_token","localStorage","getItem","httpOptions","headers","Authorization","AuthService","constructor","http","apiUrl","session","currentSessionSubject","currentSession","asObservable","currentSessionValue","value","login","username","password","post","url","pipe","data","setItem","next","loginUN","uname","pwd","request","Promise","resolve","reject","subscribe","response","Date","now","toString","acceso","error","logout","delete","removeItem","clear","deleteSession","factory","providedIn"],"sourceRoot":"","sources":["/home/pater/develop/front-larastore/front-larastore/src/app/core/services/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Session } from '@shared./interface/session.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { userInterface } from '@shared/interfaces/user.model';\nimport { map, delay, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\nvar access_token = localStorage.getItem('access_token');\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${access_token}`,\n  }),\n};\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private currentSessionSubject: BehaviorSubject<Session>;\n  public currentSession: Observable<Session>;\n  private url = `${environment.apiUrl}`;\n\n  constructor(private http: HttpClient) {\n    const session = localStorage.getItem('access_token') as unknown as Session;\n    this.currentSessionSubject = new BehaviorSubject<Session>(session);\n    this.currentSession = this.currentSessionSubject.asObservable();\n  }\n\n  public get currentSessionValue(): Session {\n    return this.currentSessionSubject.value;\n  }\n\n  login(username: string, password: string) {\n    return this.http\n      .post<Session>(`${this.url}/login-system`, { username, password })\n      .pipe(\n        tap((data) => {\n          localStorage.setItem('access_token', data['access_token']);\n          this.currentSessionSubject.next(data);\n        })\n      );\n  }\n\n  loginUN(uname: string, pwd: string) {\n    let request = this.http.post<Session>(\n      `${environment.apiUrl}/login-system`,\n      {\n        username: uname,\n        password: pwd,\n      }\n    );\n\n    return new Promise((resolve, reject) => {\n      request.subscribe(\n        (response) => {\n          if (response) {\n            localStorage.setItem('access_token', response['access_token']);\n            localStorage.setItem('permissions', response['permissions']);\n            localStorage.setItem('exp', Date.now().toString());\n            this.currentSessionSubject.next(response);\n            resolve({ acceso: true });\n          } else {\n            resolve({ acceso: false });\n          }\n        },\n        (error: any) => {\n          resolve(error);\n        }\n      );\n    });\n  }\n\n  logout() {\n    let request = this.http.delete<Session>(\n      `${this.url}/logout-system`,\n      httpOptions\n    );\n\n    return request.pipe(\n      map((data) => {\n        if (data) {\n          // remove user from local storage to log user out\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('permissions');\n          this.currentSessionSubject.next(null);\n          localStorage.clear();\n        }\n        return data;\n      })\n    );\n  }\n\n  deleteSession() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('access_token');\n    this.currentSessionSubject.next(null);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}