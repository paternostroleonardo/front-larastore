{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./core/services/auth.service\";\nexport class AuthGuard {\n  constructor(routes, authService, router) {\n    this.routes = routes;\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    if (localStorage.getItem('access_token') != null) {\n      let loginTime = parseInt(localStorage.getItem('exp'));\n      let time = Date.now();\n      let timeAuth = Math.round((time - loginTime) / (1000 * 60));\n      if (timeAuth <= 6000) {\n        return true;\n      }\n      return false;\n    } else {\n      this.authService.logout().subscribe(data => {\n        this.router.navigateByUrl('/login');\n      }, err => {\n        //console.log('Auth guard delete session.');\n        this.authService.deleteSession();\n      });\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i1.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAYA,OAAM,MAAOA,SAAS;EACpBC,YACUC,MAAc,EACdC,WAAwB,EACxBC,MAAc;IAFd,WAAM,GAANF,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;EACb;EAEHC,WAAW,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,IAAIC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,EAAE;MAChD,IAAIC,SAAS,GAAGC,QAAQ,CAACH,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC;MACrD,IAAIG,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE;MACrB,IAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,IAAI,GAAGF,SAAS,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC;MAE3D,IAAIK,QAAQ,IAAI,IAAI,EAAE;QACpB,OAAO,IAAI;;MAEb,OAAO,KAAK;KACb,MAAM;MACL,IAAI,CAACZ,WAAW,CAACe,MAAM,EAAE,CAACC,SAAS,CAChCC,IAAI,IAAI;QACP,IAAI,CAAChB,MAAM,CAACiB,aAAa,CAAC,QAAQ,CAAC;MACrC,CAAC,EACAC,GAAG,IAAI;QACN;QACA,IAAI,CAACnB,WAAW,CAACoB,aAAa,EAAE;MAClC,CAAC,CACF;MACD,OAAO,KAAK;;EAEhB;;AAhCWvB,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAwB,SAATxB,SAAS;EAAAyB,YAFR;AAAM","names":["AuthGuard","constructor","routes","authService","router","canActivate","next","state","localStorage","getItem","loginTime","parseInt","time","Date","now","timeAuth","Math","round","logout","subscribe","data","navigateByUrl","err","deleteSession","factory","providedIn"],"sourceRoot":"","sources":["/home/pater/develop/front-larastore/front-larastore/src/app/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './core/services/auth.service';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private routes: Router,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (localStorage.getItem('access_token') != null) {\n      let loginTime = parseInt(localStorage.getItem('exp'));\n      let time = Date.now();\n      let timeAuth = Math.round((time - loginTime) / (1000 * 60));\n\n      if (timeAuth <= 6000) {\n        return true;\n      }\n      return false;\n    } else {\n      this.authService.logout().subscribe(\n        (data) => {\n          this.router.navigateByUrl('/login');\n        },\n        (err) => {\n          //console.log('Auth guard delete session.');\n          this.authService.deleteSession();\n        }\n      );\n      return false;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}