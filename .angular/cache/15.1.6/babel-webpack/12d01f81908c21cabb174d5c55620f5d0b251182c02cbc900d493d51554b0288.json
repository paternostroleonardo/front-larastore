{"ast":null,"code":"import _asyncToGenerator from \"/home/pater/develop/front-larastore/front-larastore/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, authService, route, Token, Permission) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.route = route;\n    this.Token = Token;\n    this.Permission = Permission;\n    this.msg = '';\n    this.error = null;\n  }\n  logIn() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.authService.loginUN(_this.form.value.username, _this.form.value.password).then(data => {\n        if (data['acceso'] == true) {\n          _this.route.navigate(['/dashboard']);\n          // window.location.reload();\n        } else {\n          _this.msg = 'Usuario o contrase침a inv치lidos.';\n          //       console.log('Error: ' + err);\n        }\n      });\n    })();\n  }\n  // Refresh token inicialization session + permission\n  Refresh(response) {\n    this.Token.handle(response.access_token);\n    this.Permission.changePermissionStatus(true);\n    this.route.navigateByUrl('/products');\n  }\n  handleError(error) {\n    this.error = error.error.error;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['']\n    });\n  }\n  getUserName(searchValue) {\n    sessionStorage.setItem('username', searchValue);\n    sessionStorage.getItem('username');\n    // console.log(searchValue);\n  }\n\n  get getFormGroup() {\n    return this.form;\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,QAAsC,eAAe;AAKvE,SAGEC,UAAU,QAEL,gBAAgB;AAQhB,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAOzBC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,KAAa,EACbC,KAAmB,EACnBC,UAA6B;IAJ7B,gBAAW,GAAXJ,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,UAAK,GAALC,KAAK;IACL,UAAK,GAALC,KAAK;IACL,eAAU,GAAVC,UAAU;IATpB,QAAG,GAAG,EAAE;IACD,UAAK,GAAG,IAAI;EAShB;EAEGC,KAAK;IAAA;IAAA;MACT,MAAM,KAAI,CAACJ,WAAW,CACnBK,OAAO,CAAC,KAAI,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,EAAE,KAAI,CAACF,IAAI,CAACC,KAAK,CAACE,QAAQ,CAAC,CAC3DC,IAAI,CAAEC,IAAS,IAAI;QAClB,IAAIA,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE;UAE1B,KAAI,CAACV,KAAK,CAACW,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;UACnC;SACD,MAAM;UACL,KAAI,CAACC,GAAG,GAAG,iCAAiC;UAC5C;;MAEJ,CAAC,CAAC;IAAC;EACP;EAEA;EACAC,OAAO,CAACC,QAAQ;IACd,IAAI,CAACb,KAAK,CAACc,MAAM,CAACD,QAAQ,CAACE,YAAY,CAAC;IACxC,IAAI,CAACd,UAAU,CAACe,sBAAsB,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACjB,KAAK,CAACkB,aAAa,CAAC,WAAW,CAAC;EACvC;EAEAC,WAAW,CAACC,KAAK;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK,CAACA,KAAK,CAACA,KAAK;EAChC;EAEAC,QAAQ;IACN,IAAI,CAAChB,IAAI,GAAG,IAAI,CAACP,WAAW,CAACwB,KAAK,CAAC;MACjCf,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAAC4B,QAAQ,CAAC;MACnCf,QAAQ,EAAE,CAAC,EAAE;KACd,CAAC;EACJ;EAEAgB,WAAW,CAACC,WAAmB;IAC7BC,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEF,WAAW,CAAC;IAC/CC,cAAc,CAACE,OAAO,CAAC,UAAU,CAAC;IAClC;EACF;;EAEA,IAAIC,YAAY;IACd,OAAO,IAAI,CAACxB,IAAI;EAClB;CACD;AAzDYT,cAAc,eAL1BF,SAAS,CAAC;EACToC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACWpC,cAAc,CAyD1B;SAzDYA,cAAc","names":["Component","Validators","LoginComponent","constructor","formBuilder","authService","route","Token","Permission","logIn","loginUN","form","value","username","password","then","data","navigate","msg","Refresh","response","handle","access_token","changePermissionStatus","navigateByUrl","handleError","error","ngOnInit","group","required","getUserName","searchValue","sessionStorage","setItem","getItem","getFormGroup","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/pater/develop/front-larastore/front-larastore/src/app/modules/login/login.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { RouterModule, Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '@core/services/auth.service';\nimport { TokenService } from '@core/services/token.service';\n\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl,\n} from '@angular/forms';\nimport { Session } from '@app/shared/interfaces/session.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  public response: Session;\n  private form: FormGroup;\n  msg = '';\n  public error = null;\n  public dataid: any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private route: Router,\n    private Token: TokenService,\n    private Permission: PermissionService,\n  ) {}\n\n  async logIn() {\n    await this.authService\n      .loginUN(this.form.value.username, this.form.value.password)\n      .then((data: any) => {\n        if (data['acceso'] == true) {\n\n          this.route.navigate(['/dashboard']);\n          // window.location.reload();\n        } else {\n          this.msg = 'Usuario o contrase침a inv치lidos.';\n          //       console.log('Error: ' + err);\n        }\n      });\n  }\n\n  // Refresh token inicialization session + permission\n  Refresh(response) {\n    this.Token.handle(response.access_token);\n    this.Permission.changePermissionStatus(true);\n    this.route.navigateByUrl('/products');\n  }\n\n  handleError(error) {\n    this.error = error.error.error;\n  }\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: [''],\n    });\n  }\n\n  getUserName(searchValue: string): void {\n    sessionStorage.setItem('username', searchValue);\n    sessionStorage.getItem('username');\n    // console.log(searchValue);\n  }\n\n  get getFormGroup() {\n    return this.form;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}